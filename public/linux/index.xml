<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Linuxes on 千兆光年</title>
        <link>http://localhost:1313/linux/</link>
        <description>Recent content in Linuxes on 千兆光年</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Thu, 30 Dec 2021 09:30:46 +0800</lastBuildDate><atom:link href="http://localhost:1313/linux/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>磁盘性能监控</title>
        <link>http://localhost:1313/linux/disk-monitor/</link>
        <pubDate>Thu, 30 Dec 2021 09:30:46 +0800</pubDate>
        
        <guid>http://localhost:1313/linux/disk-monitor/</guid>
        <description>&lt;h2 id=&#34;一-磁盘性能衡量指标&#34;&gt;一. 磁盘性能衡量指标
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;IOPS：Input/Output Operations per Second，即每秒能处理的I/O个数，用于表示块存储处理读写（输出/输入）的能力。&lt;/li&gt;
&lt;li&gt;吞吐量：吞吐量是指单位时间内可以成功传输的数据数量。&lt;/li&gt;
&lt;li&gt;阿里云块存储性能：&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;ES SD云盘&lt;/th&gt;
&lt;th&gt;SSD云盘&lt;/th&gt;
&lt;th&gt;高效云盘&lt;/th&gt;
&lt;th&gt;普通云盘&lt;/th&gt;
&lt;th&gt;SSD共享块存储&lt;/th&gt;
&lt;th&gt;高效共享块存储&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;单盘最大容量&lt;/td&gt;
&lt;td&gt;32768 GiB&lt;/td&gt;
&lt;td&gt;32768 GiB&lt;/td&gt;
&lt;td&gt;32768 GiB&lt;/td&gt;
&lt;td&gt;2000 GiB&lt;/td&gt;
&lt;td&gt;32768 GiB&lt;/td&gt;
&lt;td&gt;32768 GiB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;最大IOPS&lt;/td&gt;
&lt;td&gt;1000000&lt;/td&gt;
&lt;td&gt;25000*&lt;/td&gt;
&lt;td&gt;5000&lt;/td&gt;
&lt;td&gt;数百&lt;/td&gt;
&lt;td&gt;30000&lt;/td&gt;
&lt;td&gt;5000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;最大吞吐量&lt;/td&gt;
&lt;td&gt;4000 MBps&lt;/td&gt;
&lt;td&gt;300 MBps*&lt;/td&gt;
&lt;td&gt;140 MBps&lt;/td&gt;
&lt;td&gt;30−40 MBps&lt;/td&gt;
&lt;td&gt;512 MBps&lt;/td&gt;
&lt;td&gt;160 MBps&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;二-性能测试&#34;&gt;二. 性能测试：
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;可用dd测试块存储性能&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;例：
[root@jenkins tmp]# dd if=/dev/zero of=/tmp/testfile bs=1M count=2048

2048+0 records in
2048+0 records out
2147483648 bytes (2.1 GB) copied, 9.90132 s, 217 MB/s
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;测试随机写IOPS，运行以下命令：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;fio -direct=1 -iodepth=128 -rw=randwrite -ioengine=libaio -bs=4k -size=1G -numjobs=1 -runtime=1000 -group_reporting -filename=iotest -name=Rand_Write_Testing
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;测试随机读IOPS，运行以下命令：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;fio -direct=1 -iodepth=128 -rw=randread -ioengine=libaio -bs=4k -size=1G -numjobs=1 -runtime=1000 -group_reporting -filename=iotest -name=Rand_Read_Testing
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;测试顺序写吞吐量，运行以下命令：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;fio -direct=1 -iodepth=64 -rw=write -ioengine=libaio -bs=1024k -size=1G -numjobs=1 -runtime=1000 -group_reporting -filename=iotest -name=Write_PPS_Testing
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;测试顺序读吞吐量，运行以下命令：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;fio -direct=1 -iodepth=64 -rw=read -ioengine=libaio -bs=1024k -size=1G -numjobs=1 -runtime=1000 -group_reporting -filename=iotest -name=Read_PPS_Testing
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;各种参数的含义：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;-direct=1       表示测试时忽略I/O缓存，数据直写。
-iodepth=128    表示使用AIO时，同时发出I/O数的上限为128。
-rw=randwrite   表示测试时的读写策略为随机写（random writes）。作其它测试时可以设置为：
                    randread（随机读random reads）
                    read（顺序读sequential reads）
                    write（顺序写sequential writes）
                    randrw（混合随机读写mixed random reads and writes）
-ioengine=libaio    表示测试方式为libaio（Linux AIO，异步I/O）。应用程序使用I/O通常有两种方式：
                        同步
                        同步的I/O一次只能发出一个I/O请求，等待内核完成才返回。这样对于单个线程iodepth总是小于1，但是可以透过多个线程并发执行来解决。通常会用16−32根线程同时工作将iodepth塞满。

                        异步
                        异步的I/O通常使用libaio这样的方式一次提交一批I/O请求，然后等待一批的完成，减少交互的次数，会更有效率。

-bs=4k          表示单次I/O的块文件大小为4 KB。未指定该参数时的默认大小也是4 KB。
                    测试IOPS时，建议将bs设置为一个比较小的值，如本示例中的4k。
                    测试吞吐量时，建议将bs设置为一个较大的值，如本示例中的1024k。
-size=1G        表示测试文件大小为1 GiB。
-numjobs=1      表示测试线程数为1。
-runtime=1000       表示测试时间为1000秒。如果未配置，则持续将前述-size指定大小的文件，以每次-bs值为分块大小写完。
-group_reporting    表示测试结果里汇总每个进程的统计信息，而非以不同job汇总展示信息。
-filename=iotest    指定测试文件的名称，比如iotest。测试裸盘可以获得真实的硬盘性能，但直接测试裸盘会破坏文件系统结构，请在测试前提前做好数据备份。
-name=Rand_Write_Testing    表示测试任务名称为Rand_Write_Testing，可以随意设定。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例：测试随机写IOPS&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[root@lxk tmp]# fio -direct=1 -iodepth=128 -rw=randwrite -ioengine=libaio -bs=4k -size=1G -numjobs=1 -runtime=1000 -group_reporting -filename=iotest -name=Rand_Write_Testing
Rand_Write_Testing: (g=0): rw=randwrite, bs=(R) 4096B-4096B, (W) 4096B-4096B, (T) 4096B-4096B, ioengine=libaio, iodepth=128
fio-3.1
Starting 1 process
Rand_Write_Testing: Laying out IO file (1 file / 1024MiB)
Jobs: 1 (f=1): [w(1)][100.0%][r=0KiB/s,w=9696KiB/s][r=0,w=2424 IOPS][eta 00m:00s]
Rand_Write_Testing: (groupid=0, jobs=1): err= 0: pid=29264: Tue Oct  9 09:18:01 2018
  write: IOPS=2131, BW=8525KiB/s (8730kB/s)(1024MiB/122993msec)
    slat (usec): min=3, max=111464, avg=20.62, stdev=881.32
    clat (usec): min=495, max=635660, avg=60031.26, stdev=45220.47
     lat (usec): min=510, max=635664, avg=60052.28, stdev=45221.82
    clat percentiles (msec):
     |  1.00th=[    3],  5.00th=[    4], 10.00th=[    5], 20.00th=[    6],
     | 30.00th=[    8], 40.00th=[   34], 50.00th=[   91], 60.00th=[   94],
     | 70.00th=[   96], 80.00th=[   97], 90.00th=[  100], 95.00th=[  102],
     | 99.00th=[  115], 99.50th=[  125], 99.90th=[  209], 99.95th=[  313],
     | 99.99th=[  634]
   bw (  KiB/s): min= 4104, max=10544, per=100.00%, avg=8525.44, stdev=423.40, samples=245
   iops        : min= 1026, max= 2636, avg=2131.36, stdev=105.86, samples=245
  lat (usec)   : 500=0.01%, 750=0.03%, 1000=0.04%
  lat (msec)   : 2=0.18%, 4=5.16%, 10=28.87%, 20=3.94%, 50=2.20%
  lat (msec)   : 100=52.60%, 250=6.92%, 500=0.02%, 750=0.04%
  cpu          : usr=0.66%, sys=2.54%, ctx=30595, majf=0, minf=26
  IO depths    : 1=0.1%, 2=0.1%, 4=0.1%, 8=0.1%, 16=0.1%, 32=0.1%, &amp;gt;=64=100.0%
     submit    : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &amp;gt;=64=0.0%
     complete  : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &amp;gt;=64=0.1%
     issued rwt: total=0,262144,0, short=0,0,0, dropped=0,0,0
     latency   : target=0, window=0, percentile=100.00%, depth=128

Run status group 0 (all jobs):
  WRITE: bw=8525KiB/s (8730kB/s), 8525KiB/s-8525KiB/s (8730kB/s-8730kB/s), io=1024MiB (1074MB), run=122993-122993msec

Disk stats (read/write):
  vda: ios=1/262860, merge=0/13134, ticks=15/15500516, in_queue=15511938, util=99.95%
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;三-系统级磁盘io监控&#34;&gt;三. 系统级磁盘IO监控
&lt;/h2&gt;&lt;h3 id=&#34;1-top&#34;&gt;1. top
&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;top - 16:59:14 up 15:40,  2 users,  load average: 0.00, 0.00, 0.00
Tasks: 100 total,   1 running,  99 sleeping,   0 stopped,   0 zombie
Cpu(s):  0.0%us,  0.2%sy,  0.0%ni, 99.8%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st
Mem:   2037260k total,  1342560k used,   694700k free,    69060k buffers
Swap:  4095996k total,        0k used,  4095996k free,  1018516k cached
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的Cpu(s)中,0.0%wa为CPU等待磁盘IO所占的时间，若该值持续过高，则表示磁盘IO性是系统的瓶颈。&lt;/p&gt;
&lt;h3 id=&#34;2-iostat&#34;&gt;2. iostat
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;用在磁盘IO监控中的参数&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;OPTIONS：
-d 显示磁盘利用报告 
-m 某些使用block或Kilobytes为单位的列强制使用megabytes为单位
 
-x 显示详细状态  
 CPU Utilization Report
 %iowait：Show the percentage of time that the CPU or CPUs were idle during which the system had an outstanding disk I/O request.
 CPU等待未完成的磁盘读写请求所耗费的CPU时钟周期的百分比
 Device Utilization Report
 rrqm/s
 The number of read requests merged per second that were queued to the device.
 每秒发送给设备排队的读请求的合并数量
 wrqm/s
 The number of write requests merged per second that were queued to the device.
 每秒发送给设备排队的写请求的合并数量
 r/s
 The number of read requests that were issued to the device per second.
 每秒读请求数量
 w/s
 The number of write requests that were issued to the device per second.
 每秒写请求数量
 rsec/s
 The number of sectors read from the device per second.
 每秒读的磁盘扇区数量
 wsec/s
 The number of sectors written to the device per second.
 每秒写到磁盘的扇区数量
 avgrq-sz
 The average size (in sectors) of the requests that were issued to the device.
 请求发送给设备的平均扇区大小
 avgqu-sz
 The average queue length of the requests that were issued to the device.
 发送给设备的请求的平均队列长度
 await
 The average time (in milliseconds) for I/O requests issued to the device to be served. This includes the time spent by the requests in queue and the time spent servicing them.
 I/O请求发送给目标磁盘设备所需的平均时间(以毫秒为单位)。包括排队等待和处理请求的时间。（即IO响应时长，一般应低于5s）
 svctm
 The average service time (in milliseconds) for I/O requests that were issued to the device. Warning! Do not trust this field any more. This field will be removed in a future sysstat version.
 分发给设备的 I/O 请求的平均服务时间。（单位是毫秒）警告！不要再相信这列值了。这一列将会在一个未来的版本中移除。
 一次 IO 请求的服务时间，对于单块盘，完全随机读时，基本在 7ms 左右，即寻道 + 旋转延迟时间
 %util
 Percentage of elapsed time during which I/O requests were issued to the device (bandwidth utilization for the device). Device saturation occurs when this value is close to 100%.
 分发给设备的 I/O 请求的运行时间所占的百分比。（设备的带宽利用率）这个值接近 100%表明设备饱和。
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;例：
[root@gitlab ~]# iostat -d -x 1 1
Linux 2.6.32-696.16.1.el6.x86_64 (gitlab)     10/09/2018     _x86_64_    (2 CPU)

Device:         rrqm/s   wrqm/s     r/s     w/s   rsec/s   wsec/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util
vda              22.57    10.39  108.92    2.50  7615.36   102.80    69.27     0.69    6.23    6.28    4.30   0.27   3.04

[root@gitlab ~]# iostat -x 1 1
Linux 2.6.32-696.16.1.el6.x86_64 (gitlab)     10/09/2018     _x86_64_    (2 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           2.37    0.00    1.75   16.51    0.00   79.36

Device:         rrqm/s   wrqm/s     r/s     w/s   rsec/s   wsec/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util
vda              22.57    10.39  108.91    2.50  7614.57   102.80    69.27     0.69    6.23    6.28    4.30   0.27   3.04

[root@gitlab ~]# iostat
Linux 2.6.32-696.16.1.el6.x86_64 (gitlab)     10/09/2018     _x86_64_    (2 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           2.37    0.00    1.75   16.51    0.00   79.36

Device:            tps   Blk_read/s   Blk_wrtn/s   Blk_read   Blk_wrtn
vda             111.41      7613.95       102.79  504368410    6809368
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;四-进程级磁盘io监控&#34;&gt;四. 进程级磁盘IO监控
&lt;/h2&gt;&lt;h3 id=&#34;1-iotop&#34;&gt;1. iotop
&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Total DISK READ : 0.00 B/s | Total DISK WRITE : 0.00 B/s
Actual DISK READ: 0.00 B/s | Actual DISK WRITE: 0.00 B/s
 TID PRIO USER DISK READ DISK WRITE SWAPIN IO&amp;gt; COMMAND  
 1 be/4 root 0.00 B/s 0.00 B/s 0.00 % 0.00 % systemd --switched-root --system --deserialize 22
 2 be/4 root 0.00 B/s 0.00 B/s 0.00 % 0.00 % [kthreadd]
 3 be/4 root 0.00 B/s 0.00 B/s 0.00 % 0.00 % [ksoftirqd/0]
 5 be/0 root 0.00 B/s 0.00 B/s 0.00 % 0.00 % [kworker/0:0H]
 7 rt/4 root 0.00 B/s 0.00 B/s 0.00 % 0.00 % [migration/0]
 8 be/4 root 0.00 B/s 0.00 B/s 0.00 % 0.00 % [rcu_bh]
 9 be/4 root 0.00 B/s 0.00 B/s 0.00 % 0.00 % [rcu_sched]
 10 be/0 root 0.00 B/s 0.00 B/s 0.00 % 0.00 % [lru-add-drain]
...以下省略
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;选项：
-b ：批量显示，无交互，主要用作记录到文件。
-o ：只显示有io操作的进程
-n # ：总共显示几次
-d # ：显示的时间间隔
-u USERNAME ：显示指定用户打开进程的IO状况
-p PID ：显示指定进程的IO状况
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;快捷键：
左右箭头：改变排序方式，默认是按IO排序。
r：改变排序顺序。
o：只显示有IO输出的进程。
p：进程/线程的显示方式的切换。
a：显示累积使用量。
q：退出。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例：显示进程ID为2372的IO状况，输出至终端，显示一次（性能监控时常用）。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[root@lxk ~]# iotop -b -p 2372 -n 1
Total DISK READ : 0.00 B/s | Total DISK WRITE : 0.00 B/s
Actual DISK READ: 0.00 B/s | Actual DISK WRITE: 0.00 B/s
 TID PRIO USER DISK READ DISK WRITE SWAPIN IO COMMAND
 2372 be/4 root 0.00 B/s 0.00 B/s 0.00 % 0.00 % [kworker/0:1]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;2-pidstat&#34;&gt;2. pidstat
&lt;/h3&gt;&lt;h5 id=&#34;pidstat---report-statistics-for-linux-tasks&#34;&gt;pidstat - Report statistics for Linux tasks.
&lt;/h5&gt;&lt;h5 id=&#34;options&#34;&gt;OPTIONS
&lt;/h5&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;-C comm
 Display only tasks whose command name includes the string comm. This string can be a regular expression.
 只显示进程名中包含comm的进程，comm可以是正则表达式
-d Report I/O statistics (kernels 2.6.20 and later only). The following values may be displayed:
 报告I/O的统计信息（2.6.20版后内核版本支持该功能）。会显示以下值：
 UID
 The real user identification number of the task being monitored.
 用户ID号
 USER
 The name of the real user owning the task being monitored.
 运行进程的用户名
 PID
 The identification number of the task being monitored.
 进程号
 kB_rd/s
 Number of kilobytes the task has caused to be read from disk per second.
 每秒此进程从磁盘读取的千字节数
 kB_wr/s
 Number of kilobytes the task has caused, or shall cause to be written to disk per second.
 此进程已经或者将要写入磁盘的每秒千字节数
 kB_ccwr/s
 Number of kilobytes whose writing to disk has been cancelled by the task. This may occur when the task truncates some dirty pagecache. In this case, some IO which another task has been accounted for will not be happening.
 由任务取消的写入磁盘的千字节数
 Command
 The command name of the task.
 命令的名字
-u Report CPU utilization. 报告cpu使用情况，会显示以下内容：
 UID
 The real user identification number of the task being monitored.
 被监视任务的真实用户标识号。
 USER
 The name of the real user owning the task being monitored.
 被监视任务用户的真实用户名
 PID
 The identification number of the task being monitored.
 被监控任务的pid号
 %usr
 Percentage of CPU used by the task while executing at the user level (application), with or without nice priority. Note that this field does NOT include time spent running a virtual processor.
 CPU在用户空间使用情况（百分比）。包含或不包含nice优先级。这个字段不包括运行虚拟处理器的时间。
 %system
 Percentage of CPU used by the task while executing at the system level (kernel).
 任务在内核空间执行时使用的CPU百分比。
 %guest
 Percentage of CPU spent by the task in virtual machine (running a virtual processor).
 任务在虚拟机中消耗的CPU百分比（运行在虚拟处理器之上）
 %CPU
 Total percentage of CPU time used by the task. In an SMP environment, the task&amp;#39;s CPU usage will be divided by the total number of CPU&amp;#39;s if option -I has been entered on the command line.
 任务使用的总的CPU百分比。
 CPU
 Processor number to which the task is attached.
 任务在哪个CPU上执行
 Command
 The command name of the task. 执行任务的命令
   在报告任务及其所有子任务的全局统计数据时，可能会显示以下值:
    UID             被监视任务的真实用户标识号。
    USER            与子任务一起被监视的任务所属的实际用户的名称。
    PID             与子任务一起被监视的任务所属的用户的PID号
    usr-ms          CPU在处理任务及其子任务时，在用户空间花费的毫秒数。
    system-ms       CPU在处理任务及其子任务时，在内核空间花费的毫秒数。
    guest-ms        CPU在处理任务及其子任务时，在虚拟机上花费的毫秒数。
    Command         执行任务的命令

-l Display the process command name and all its arguments.
 显示进程的命令名和它的全部参数
-I In an SMP environment, indicate that tasks CPU usage (as displayed by option -u ) should be divided by the total number of processors.
 显示
-p { pid [,...] | SELF | ALL }
 Select tasks (processes) for which statistics are to be reported.  
 显示指定pid进程的报告

-r Report page faults and memory utilization. 报告页面错误及内存使用量，会显示以下值：
 minflt/s
 Total number of minor faults the task has made per second, those which have not required loading a memory page from disk.
 每秒次缺页错误次数(minor page faults)，次缺页错误次数意即虚拟内存地址映射成物理内存地址产生的page fault次数
 majflt/s
 Total number of major faults the task has made per second, those which have required loading a memory page from disk.
 每秒主缺页错误次数(major page faults)，当虚拟内存地址映射成物理内存地址时，相应的page在swap中，这样的page fault为major page fault，一般在内存使用紧张时产生
 minflt-nr
 Total number of minor faults made by the task and all its children, and collected during the interval of time.
 在指定的时间间隔内收集的进程和其子进程的次缺页错误次数
 majflt-nr
 Total number of major faults made by the task and all its children, and collected during the interval of time.
 在指定的时间间隔内收集的进程和其子进程的主缺页错误次数
-t Also display statistics for threads associated with selected tasks.This option adds the following values to the reports:
 显示任务线程
 TGID
 The identification number of the thread group leader.
 线程组父进程的ID号
 TID
 The identification number of the thread being monitored.
 被监视线程的ID号。
-s Report stack utilization. 报告堆栈的利用率
 StkSize
 The amount of memory in kilobytes reserved for the task as stack, but not necessarily used.
 为任务保留的以千字节为单位的内存量，但不一定使用。
 StkRef
 The amount of memory in kilobytes used as stack, referenced by the task.
 stack使用的总内存。

-w Report task switching activity (kernels 2.6.23 and later only). The following values may be displayed:
 cswch/s
 Total number of voluntary context switches the task made per second. A voluntary context switch occurs when a task blocks because it requires a resource that is unavailable.
 每秒切换任务的自愿上下文总数。当任务因资源不足而阻塞时，就会发生自愿上下文切换。
 nvcswch/s
 Total number of non voluntary context switches the task made per second. A involuntary context switch takes place when a task executes for the duration of its time slice and then is forced to relinquish the processor.
 每秒完成的非自愿上下文切换任务的总数。当任务在其时间片期间执行，被迫放弃处理器时，会发生非自愿的上下文切换。如大量进程在争取CPU、进程时间片已经到等原因
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;examples&#34;&gt;EXAMPLES：
&lt;/h5&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;~]# pidstat 2 5
 Display five reports of CPU statistics for every active task in the system at two second intervals.
 每2秒显示5次
 ~]# pidstat -r -p 1643 2 5
 Display five reports of page faults and memory statistics for PID 1643 at two second intervals.
 每2秒显示5次PID号为1643进程的页面错误报告和内存统计数据。
 ~]# pidstat -C &amp;#34;fox|bird&amp;#34; -r -p ALL
 Display global page faults and memory statistics for all the processes whose command name includes the string &amp;#34;fox&amp;#34; or &amp;#34;bird&amp;#34;.
 显示进程名中包含fox或bird的所有进程的页面错误和内存使用量
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Linux 4</title>
        <link>http://localhost:1313/linux/linux-4/</link>
        <pubDate>Wed, 08 Jul 2020 14:36:55 +0800</pubDate>
        
        <guid>http://localhost:1313/linux/linux-4/</guid>
        <description>&lt;h4 id=&#34;screen&#34;&gt;screen
&lt;/h4&gt;&lt;p&gt;在日常运维工作中，我们会遇到长线执行的任务，但是这个任务需要一直占用一个终端，如copy一个大文件到其他机器，如下载一个大文件到本地。。。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;screen&lt;/code&gt;命令非常的有用，主要用于时间较长的任务剥离终端继续运行。&lt;/p&gt;
&lt;p&gt;在linux系统中，任何进程的创建都是存在一个父进程来负责管理子进程的，一般情况下，你在当前shell运行的进程，父进程就是这个shell，当这个shell退出，子进程也会退出，这样任务就会停止。&lt;/p&gt;
&lt;p&gt;选项总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-S 新建一个终端 -S 666&lt;/li&gt;
&lt;li&gt;-ls 列出全部终端&lt;/li&gt;
&lt;li&gt;-X 加入一个存在的终端 -X 666 加入666&lt;/li&gt;
&lt;li&gt;快捷键 Crtl +a+d 剥离终端&lt;/li&gt;
&lt;li&gt;-r 回到上一次剥离的终端&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;echo&#34;&gt;echo
&lt;/h4&gt;&lt;p&gt;回显命令，用于输出变量值或者重定向输出到指定位置，和其他语言的print相似&lt;/p&gt;
&lt;p&gt;选项总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-n 不自动换行&lt;/li&gt;
&lt;li&gt;-e 启用字符解释&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# echo -n hhh&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hhh&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# echo hhh   &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hhh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;关于单引号和双引号，其实是强引用和弱引用的区别，在强引用的状态下，全部字符都被翻译成字符串，弱引用变量会被翻译成对应的值&lt;/p&gt;
&lt;h4 id=&#34;命令帮助&#34;&gt;命令帮助
&lt;/h4&gt;&lt;p&gt;这个话题涉及几个常见的命令，&lt;code&gt;whatis&lt;/code&gt;,&lt;code&gt;command --help&lt;/code&gt;,&lt;code&gt;man&lt;/code&gt;,&lt;code&gt;/usr/share/doc&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;whatis&#34;&gt;whatis
&lt;/h5&gt;&lt;p&gt;这个命令是通过系统自带的一个数据库来查询帮助的，这个数据库存储了命令的简单使用和介绍&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;makewhatis&lt;/code&gt;命令可以创建数据库&lt;/p&gt;
&lt;p&gt;centos7 使用&lt;code&gt;mandb&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;数据库位于&lt;code&gt;/var/cache/man/os6/mandb&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;man&#34;&gt;man
&lt;/h5&gt;&lt;p&gt;man帮助是每个linux系统使用者都很熟悉的命令，它包含了每个命令的使用手册。&lt;/p&gt;
&lt;p&gt;man命令章节介绍：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一章：用户命令&lt;/li&gt;
&lt;li&gt;第二章：系统调用&lt;/li&gt;
&lt;li&gt;第三章：C库调用&lt;/li&gt;
&lt;li&gt;第四章：设备文件&lt;/li&gt;
&lt;li&gt;第五章：配置格式&lt;/li&gt;
&lt;li&gt;第六章：游戏&lt;/li&gt;
&lt;li&gt;第七章：杂项&lt;/li&gt;
&lt;li&gt;第八章：管理命令&lt;/li&gt;
&lt;li&gt;第九章：linux内核API&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Linux基础入门(3)</title>
        <link>http://localhost:1313/linux/linux-three/</link>
        <pubDate>Sat, 06 Jun 2020 12:09:40 +0800</pubDate>
        
        <guid>http://localhost:1313/linux/linux-three/</guid>
        <description>&lt;h1 id=&#34;命令简介&#34;&gt;命令简介
&lt;/h1&gt;&lt;p&gt;通常在命令行执行的操作，我们称之为命令。linux中，命令分为两种类型，内部命令和外部命令。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内部命令：随着bash加载近内存的命令&lt;/li&gt;
&lt;li&gt;外部命令：后来安装的命令或者存储在磁盘上的命令&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那外部命令是怎么被查找到的呢？其实是因为系统中存在PATH的环境变量，bash会按照PATH路径来查找命令。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# echo $PATH&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/root/.pyenv/bin:/home/jdk/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/usr/local/bin/:/root/bin 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 可以看到PATH变量其实存储的是以冒号分割的一个个路径，查找的过程中是按照顺序依次查找，第一个查找到的生效&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如何查看一个命令的类型？可以使用type命令查看&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# type cd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd is a shell builtin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# type python&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python is /usr/bin/python
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 这里可以很清晰的看到内建命令直接显示的是内建，外部显示的是他的安装路径&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;内部命令查看帮助手册&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# help cd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd: cd &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-L|&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-P &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-e&lt;span style=&#34;color:#f92672&#34;&gt;]]]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;dir&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Change the shell working directory.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Change the current directory to DIR.  The default DIR is the value of the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    HOME shell variable.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;列出全部的内建命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# enable&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;enable .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;enable :
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;enable alias
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;enable cd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;enable hash
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;enable help
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;enable history
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;enable kill
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;... &lt;span style=&#34;color:#75715e&#34;&gt;# 这里仅展示了一部分，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但其实有部分命令是内建命令但同时也存在一个外部命令，为了防止内建被禁用时的使用。如：echo&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# type echo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo is a shell builtin &lt;span style=&#34;color:#75715e&#34;&gt;# 非常清晰的看到时内建命令&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# enable -n echo # 这里禁用了echo命令&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# type echo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo is /usr/bin/echo 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 此时echo成为了一个外部命令&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通常我们要查找一个命令的详细路径，一般有两个命令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;which&lt;/li&gt;
&lt;li&gt;whereis&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两个命令的区别就是whereis本身会显示更详细的信息&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# which python&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/usr/bin/python
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# whereis python&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python: /usr/bin/python3.6m /usr/bin/python2.7 /usr/bin/python /usr/bin/python2.7-config /usr/bin/python3.6 /usr/lib/python2.6 /usr/lib/python2.7 /usr/lib/python3.6 /usr/lib64/python2.7 /usr/lib64/python3.6 /etc/python /usr/local/bin/python3.7m-config /usr/local/bin/python3.7-config /usr/local/bin/python3.7m /usr/local/bin/python3.7 /usr/include/python3.6m /usr/include/python2.7 /usr/share/man/man1/python.1.gz
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里存在一个问题，我们每次要使用一个外部命令的时候，都要查找一遍PATH吗？其实试试不需要的，当第一次找到的时候，这个命令的路径就会被存储在内存中，通常我们称之为hashed&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# hash&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hits    command
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;    /usr/bin/whereis
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   左侧时命中次数 ，右侧显示的是命令的绝对路径
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# hash -d python # 删除python命令的hash&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# hash -r # 清除全部的hash&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;每次退出终端后hash会全部清空&lt;/p&gt;
&lt;p&gt;命令本身可以定义别名&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# alias h=hostname #定义一个别名h，命令为hostname&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# h&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ops
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# alias  # 列出全部的别名&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alias cp&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cp -i&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alias egrep&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;egrep --color=auto&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alias fgrep&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fgrep --color=auto&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alias grep&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;grep --color=auto&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alias h&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hostname&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alias k&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;kubectl&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alias l.&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ls -d .* --color=auto&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alias ll&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ls -l --color=auto&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alias ls&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ls --color=auto&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alias mv&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mv -i&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alias rm&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rm -i&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alias which&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;别名的优先级最高，大于内建命令，大于外部命令&lt;/p&gt;
&lt;h1 id=&#34;时间和时区&#34;&gt;时间和时区
&lt;/h1&gt;&lt;p&gt;常用命令总结&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# date # 显示当前机器的时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Sat Jun  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; 13:36:27 CST &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# date &amp;#34;+%F&amp;#34; # 格式化当前时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020-06-06 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# date -d &amp;#34;-10 days&amp;#34; &amp;#34;+%F&amp;#34; # 求十天前的日期&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020-05-27
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;硬件时间显示&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# hwclock &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Sat &lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt; Jun &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt; 01:39:46 PM CST  -0.037121 seconds
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# clock&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Sat &lt;span style=&#34;color:#ae81ff&#34;&gt;06&lt;/span&gt; Jun &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt; 01:39:52 PM CST  -0.322863 seconds
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 上边的两个命令都用来显示硬件时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;时区的相关设置&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# timedatectl list-timezones&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Africa/Abidjan
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Africa/Accra
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Africa/Addis_Ababa
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Africa/Algiers
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;............ &lt;span style=&#34;color:#75715e&#34;&gt;# 列出全部的时区&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# timedatectl set-timezone Africa/Accra # 设置时区&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;日历的相关显示,在Linux中使用cal命令来显示日历&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# cal # 显示现在的日期 这里今天的日志在终端是加了底色的，因为复制出来所有没有了&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      June &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;     
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Su Mo Tu We Th Fr Sa
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# cal 2020 # 显示2020年的全部月份&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                               &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;                               
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       January               February                 March       
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Su Mo Tu We Th Fr Sa   Su Mo Tu We Th Fr Sa   Su Mo Tu We Th Fr Sa
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;                      &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; 。。。。。。。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Linux基础入门(2)</title>
        <link>http://localhost:1313/linux/linux-two/</link>
        <pubDate>Fri, 27 Mar 2020 22:29:06 +0800</pubDate>
        
        <guid>http://localhost:1313/linux/linux-two/</guid>
        <description>&lt;h3 id=&#34;概述&#34;&gt;概述
&lt;/h3&gt;&lt;p&gt;熟悉windows系统的同学都知道，win系统本身是存在分区盘符的概念的，如：C盘一般是存放我们的系统文件。其实任何操作系统都是有文件系统的，这样才可以存放我们的文件，linux也不例外。但是Linux和windows组织的方式是不太一样的，在linux中第一个分区称之为根分区，采用符号“/”来表示，下面一张图可以看到基本的分区结构，这里的分区结构展示的MBR类型的分区,GPT另作讨论：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://cdn.oyfacc.cn/linux/linux-diskpart.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;disk-part&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;在mbr类型的分区中，主分区+扩展分区=4个分区，而且扩展分区最多有一个，不直接存储数据，而是划分为逻辑分区后再存储数据，这里的分区主要是针对单个磁盘说的。MBR类型的分区最大支持的磁盘大小为2T，至于为什么，后面会详细讲述。其实生产环境中用到扩展分区真的很少，大多数都是一个硬盘上就存在一个分区。逻辑分区的号码一般是从5开始的。&lt;/p&gt;
&lt;h5 id=&#34;lsblk命令-查看全部磁盘和磁盘的分区&#34;&gt;lsblk命令： 查看全部磁盘和磁盘的分区
&lt;/h5&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# lsblk&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vdb    253:16   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  500G  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; disk 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;└─vdb1 253:17   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  500G  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; part 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vda    253:0    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  100G  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; disk 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;└─vda1 253:1    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  100G  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; part /
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;上篇文章有解析
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;linux用户&#34;&gt;Linux用户
&lt;/h5&gt;&lt;p&gt;Linux的账户类型分为两类：1，管理账户。2，普通用户&lt;/p&gt;
&lt;p&gt;管理账户用于管理操作系统，普通用户一般权限有限，只能做一些仅有的操作，像查看日志这些基本的功能&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;root&lt;/code&gt;账户比较特别，是超级管理员，拥有全部的权限，危险性很高，轻易不要暴露&lt;/p&gt;
&lt;p&gt;系统账号的ID，在centos6系统中，普通账户的ID从500开始，500之前是管理账户，centos7普通用户从1000开始，之前是管理账户，而root一般是0号账户&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# echo $UID&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;用于查看当前登陆账户的ID
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;终端&#34;&gt;终端
&lt;/h5&gt;&lt;p&gt;终端是指我们当前操作的页面，这个页面可以是命令行，也可以是桌面。终端分为两种：1，物理终端，2，虚拟终端&lt;/p&gt;
&lt;p&gt;物理终端：一般是说/dev/consol，也就是通常所说的连接机器的显示器和键盘&lt;/p&gt;
&lt;p&gt;虚拟终端：一般指远程连接过来的终端,/de/pts/0&lt;/p&gt;
&lt;p&gt;模拟终端：指和我们交互的命令行窗口，一般通过&lt;code&gt;ctrl+alt+F(1~6)&lt;/code&gt;切换模拟终端 /dev/tty&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-linux&#34; data-lang=&#34;linux&#34;&gt;[root@ops ~]# tty
/dev/pts/0
查看所有的终端
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;运行级别&#34;&gt;运行级别
&lt;/h5&gt;&lt;p&gt;在linux中存在运行级别的概念&lt;/p&gt;
&lt;p&gt;0级别：关机&lt;/p&gt;
&lt;p&gt;1级别：单用户模式&lt;/p&gt;
&lt;p&gt;3级别：命令行模式&lt;/p&gt;
&lt;p&gt;5级别：桌面模式&lt;/p&gt;
&lt;p&gt;6级别：重启&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# init (0 1 3 5 6)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;根据上述的解释分别的操作
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;shell&#34;&gt;shell
&lt;/h5&gt;&lt;p&gt;linux中和人命令行交互的程序叫shell，也就是壳，他是命令解释器+高级语言，也就是说，shell是一种变成语言，也是一种交互方式。shell介于系统调用外部，和库函数同级别&lt;/p&gt;
&lt;p&gt;shell既然是一种交互的方式，那就存在很多种实现，现在基本上最流行的是bash，在mac上比较流行zsh&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# echo $SHELL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;查看当前使用的shell类型
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# cat /etc/shells &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/bin/sh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/usr/bin/sh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/usr/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;查看当前系统支持的shell类型
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其实有一种特别的shell&lt;code&gt;/sbin/nologin&lt;/code&gt;可以看到是不可登陆shell，这种shell主要用于应用程序的运行，不需要交互的登陆终端，更安全。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# getent passwd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root:x:0:0:root:/root:/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bin:x:1:1:bin:/bin:/sbin/nologin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;daemon:x:2:2:daemon:/sbin:/sbin/nologin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;adm:x:3:4:adm:/var/adm:/sbin/nologin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sync:x:5:0:sync:/sbin:/bin/sync
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;halt:x:7:0:halt:/sbin:/sbin/halt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mail:x:8:12:mail:/var/spool/mail:/sbin/nologin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;。。。。。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;获取全部的用户信息
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# getent passwd root&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root:x:0:0:root:/root:/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;获取单个用户的详细信息
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;who显示用户&#34;&gt;who:显示用户
&lt;/h5&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# who&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root     pts/0        2020-03-27 23:01 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;10.10.20.40&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;用户    虚拟终端号    登陆时间          IP地址
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# who -b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         system boot  2019-08-13 14:28
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         显示系统启动时间
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;whom-显示用户&#34;&gt;whom: 显示用户
&lt;/h5&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# whoami&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;root
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;iconvwin系统文件转换linux格式不常用&#34;&gt;iconv:win系统文件转换linux格式，不常用
&lt;/h5&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iconv -f gb2312 file1 -o file2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;其他的杂项&#34;&gt;其他的杂项
&lt;/h5&gt;&lt;p&gt;想要修改登录后的提示信息可以修改&lt;code&gt;/etc/motd&lt;/code&gt;文件&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Linux基础入门(1)</title>
        <link>http://localhost:1313/linux/linux-one/</link>
        <pubDate>Mon, 16 Mar 2020 23:33:11 +0800</pubDate>
        
        <guid>http://localhost:1313/linux/linux-one/</guid>
        <description>&lt;h2 id=&#34;概述&#34;&gt;概述
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;http://cdn.oyfacc.cn/linux/linux-one.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;one-one&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;  冯诺伊曼体系结构的计算机是现在计算机系统的基石。现代计算机系统，在整体上划分为硬件系统和软件系统。硬件系统又包括内部的硬件和外部的硬件。内部硬件主要包含CPU和内存，cpu就包含传统的控制器和运算器还有寄存器这些，内存分为RAM（随机存取存储器），ROM（只读存储器）。外部设备又包含硬盘存储，输入和输出设备等。而软件主要分为系统软件和应用软件。系统软件有操作系统，数据库系统这些。应用软件主要是通用软件和专用软件，如360杀毒是应用软件，如erp系统就属于专用软件。&lt;/p&gt;
&lt;p&gt;操作系统是基石，也是最重要的系统软件，是和硬件交互的主要渠道，也是各类应用软件的载体。Linux操作系统是主流的操作系统，是开源领域软件的杰出代表，占据服务器的操作系统的大部分市场，可以说Linux系统是非常重要的。&lt;/p&gt;
&lt;p&gt;通常所说的linux系统，主要指带Linux内核，根据开源软件协议，各发行商将工具融合和linux一起打包成便于操作的系统，这就是不同的linux发型版的由来。linux的发型版是非常多的，而主流的主要分为如下的几个：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;系统名称&lt;/th&gt;
&lt;th&gt;代表1&lt;/th&gt;
&lt;th&gt;代表2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Fedora系&lt;/td&gt;
&lt;td&gt;redhat&lt;/td&gt;
&lt;td&gt;centos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;debian系&lt;/td&gt;
&lt;td&gt;ubuntu&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;发型版系统= linux内核+GNU工具&lt;/p&gt;
&lt;p&gt;计算机体系结构方面的知识可以参照上图，具体和详细的可以推荐参考《计算机组成原理》这本书，作者是唐朔飞，这是很多大学计算机专业课用书，专业度毋庸置疑。链接在这里&lt;a class=&#34;link&#34; href=&#34;https://item.jd.com/12271404.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;组成原理链接&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;命令总结&#34;&gt;命令总结
&lt;/h3&gt;&lt;h5 id=&#34;lscpu命令查看当前机器的cpu信息&#34;&gt;lscpu命令：查看当前机器的cpu信息
&lt;/h5&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# lscpu&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Architecture:          x86_64
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CPU op-mode&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:        32-bit, 64-bit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Byte Order:            Little Endian
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CPU&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:                &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;On-line CPU&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; list:   0-3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Thread&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; per core:    &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Core&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; per socket:    &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Socket&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:             &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NUMA node&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:          &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Vendor ID:             GenuineIntel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CPU family:            &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Model:                 &lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Model name:            Intel&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Xeon&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Gold &lt;span style=&#34;color:#ae81ff&#34;&gt;6151&lt;/span&gt; CPU @ 3.00GHz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Stepping:              &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CPU MHz:               3000.000
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;BogoMIPS:              6000.00
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Hypervisor vendor:     KVM
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Virtualization type:   full
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L1d cache:             32K
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L1i cache:             32K
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L2 cache:              1024K
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;L3 cache:              25344K
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NUMA node0 CPU&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:     0-3
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;file命令查看文件类型&#34;&gt;file命令：查看文件类型
&lt;/h5&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# file alertmanager &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alertmanager: ELF 64-bit LSB executable, x86-64, version &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SYSV&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, statically linked, not stripped 可执行文件
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# file a.json &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a.json: ASCII text 文本文件
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# file control.sh &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;control.sh: Bourne-Again shell script, ASCII text executable shell文件
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;hexdump命令查看二进制文件的内容&#34;&gt;hexdump命令：查看二进制文件的内容
&lt;/h5&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops bin&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# hexdump -c -n 100 redis-cli    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;177&lt;/span&gt;   E   L   F &lt;span style=&#34;color:#ae81ff&#34;&gt;002&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;001&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;001&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000010&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;002&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;   &amp;gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;001&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;   e   @  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000020&lt;/span&gt;   @  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;   &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;345&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\a&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000030&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;   @  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;   @  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;   &amp;amp;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;   %  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000040&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;006&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;005&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;   @  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000050&lt;/span&gt;   @  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;   @  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;   @  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;   @  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000060&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;370&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;001&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;\0&lt;/span&gt;                                                
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000064&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-c: 16进制格式查看
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-n 100: 显示前100位
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;lsblk-查看所有的块设备&#34;&gt;lsblk: 查看所有的块设备
&lt;/h5&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops bin&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# lsblk &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vdb    253:16   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  500G  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; disk 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;└─vdb1 253:17   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  500G  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; part 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vda    253:0    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  100G  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; disk 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;└─vda1 253:1    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  100G  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; part /
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;名字 主设备号:次设备号 移动设备 大小 只读 类型 挂载点
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;移动设备 标记为1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;只读设备 标记为1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注意观察size的大小，size小于1K的基本是扩展分区，关于分区，后续会讲到&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;sha1sum查看哈希校验码&#34;&gt;sha1sum：查看哈希校验码
&lt;/h5&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops bin&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# sha1sum redis-cli &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f03302d1760eba294b8996e59b9b56f519499869  redis-cli
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;ldd查看命令使用的链接库&#34;&gt;ldd：查看命令使用的链接库
&lt;/h5&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops bin&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ldd redis-cli &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        linux-vdso.so.1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt;  &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007ffd40ba2000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        libm.so.6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib64/libm.so.6 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f68af811000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        libdl.so.2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib64/libdl.so.2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f68af60d000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        libpthread.so.0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib64/libpthread.so.0 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f68af3f1000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        libc.so.6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib64/libc.so.6 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f68af024000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        /lib64/ld-linux-x86-64.so.2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f68afb13000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;dd-转换和复制一个文件&#34;&gt;dd: 转换和复制一个文件
&lt;/h5&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@ops ~&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# dd if=/dev/zero of=f1 bs=1M count=100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;100+0 records in
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;100+0 records out
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;104857600&lt;/span&gt; bytes &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt; MB&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; copied, 0.0613801 s, 1.7 GB/s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;: 文件源
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;of: 目的文件
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bs: 单个块大小
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;count: 总共写入多少块
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;总大小&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bs乘count
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;其他相关总结&#34;&gt;其他相关总结
&lt;/h3&gt;&lt;p&gt;cpu指令集：x86架构主要使用CISC复杂指令集，价格相对便宜，还有 RISC精简指令集和EPIC并行指令代码，主要用于专用的服务器，价格相对高昂&lt;/p&gt;
&lt;p&gt;bit和byte：位和字节，b和B，1B=8b，也就是一字节等于8位&lt;/p&gt;
&lt;h4 id=&#34;linux哲学思想&#34;&gt;Linux哲学思想
&lt;/h4&gt;&lt;p&gt;一切都是一个文件&lt;/p&gt;
&lt;p&gt;小型，单一用途的程序&lt;/p&gt;
&lt;p&gt;链接程序，共同完成复杂的操作&lt;/p&gt;
&lt;p&gt;避免令人困惑的用户界面&lt;/p&gt;
&lt;p&gt;配置数据存储在文本中&lt;/p&gt;
</description>
        </item>
        <item>
        <title>TCP问题</title>
        <link>http://localhost:1313/linux/tcp%E9%93%BE%E6%8E%A5/</link>
        <pubDate>Fri, 06 Mar 2020 23:03:27 +0800</pubDate>
        
        <guid>http://localhost:1313/linux/tcp%E9%93%BE%E6%8E%A5/</guid>
        <description>&lt;h1 id=&#34;tcp连接总结&#34;&gt;TCP连接总结
&lt;/h1&gt;&lt;p&gt;  最近一些时间线上的服务器会报TcpListenDrop和TcpOverFlowed的警告，一开始是不知道这究竟什么含义,然后开始研究tcp队列的相关含义，下面进行一些总结。
  TCP三次握手，四次分手是大家耳熟能详的过程，甚至多数人都能说明“为什么三次握手和四次握手”，但是当我们真正去实际的解决问题的时候，我们往往不能将这些理论和实际结合起来，我相信大多数的技术人员甚至不能说明整个连接过程的11种状态，这也就是为什么我们不能实际的解决问题，因为状态的变化，可以为我们提供非常多的有效信息，下面一张图搞定这些状态的变化和出现的终端。
&lt;img src=&#34;http://cdn.oyfacc.cn/network/tcp-3link.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;net-one&#34;
	
	
&gt;
这张图很清晰展现了tcp从建立连接到数据传输完成断开连接的整个状态的变化，这里对每个状态简要的进行说明下：&lt;/p&gt;
&lt;h4 id=&#34;服务端&#34;&gt;服务端
&lt;/h4&gt;&lt;p&gt; 这里一般是指被动接受的一方，不一定非得是服务器的一端；
 &lt;code&gt;LISTEN&lt;/code&gt;:这个状态是服务端最开始状态，此时等待客户端进行连接；
 &lt;code&gt;SYN_RCVD&lt;/code&gt;:这个状态是等待客户端进行确认的状态，此时客户端发来确认位，即可建立连接；
 &lt;code&gt;ESTABLISHED&lt;/code&gt;: 著名的连接建立状态；
 &lt;code&gt;CLOSE_WAIT&lt;/code&gt;:客户端主动发起分手，服务端收到请求，并且确认后的状态；
 &lt;code&gt;LAST_ACK&lt;/code&gt;:服务端发起最后一次分手后的状态，此时等待客户端确认;
 &lt;code&gt;CLOSE&lt;/code&gt;:关闭状态，客户端回复最后一次分手后的状态；&lt;/p&gt;
&lt;h4 id=&#34;客户端&#34;&gt;客户端
&lt;/h4&gt;&lt;p&gt; 这里一般是指主动发起连接的一方，不一定是终端用户；
 &lt;code&gt;CLOSED&lt;/code&gt;:被动关闭状态，此时可以调connect方法连接服务端；
 &lt;code&gt;SYN_SEND&lt;/code&gt;:发送完连接后的状态,此时等待服务端回复；
 &lt;code&gt;FIN_WAIT1&lt;/code&gt;:主动调用close方法后的状态，此时发送了一个fin信号；
 &lt;code&gt;FIN_WAIT2&lt;/code&gt;: 收到服务端对第一次发起fin状态的回复后的状态，此时等待服务端调用close方法，发起最后一次fin；
 &lt;code&gt;TIME_WAIT&lt;/code&gt;:此时服务端主动发送了最后一次FIN,客户端接收后，恢复了确认位，进入这个状态，等待最后的超市关闭,下面一段记录了几个内核参数，用于调整TCP的一些状态；&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-linux&#34; data-lang=&#34;linux&#34;&gt;net.ipv4.tcp_syncookies = 1 表示开启SYN Cookies。当出现SYN等待队列溢出时，启用cookies来处理，可防范少量SYN攻击，默认为0，表示关闭；
net.ipv4.tcp_tw_reuse = 1 表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为0，表示关闭；
net.ipv4.tcp_tw_recycle = 1 表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭。
net.ipv4.tcp_fin_timeout 修改系默认的 TIMEOUT 时间
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        
    </channel>
</rss>
