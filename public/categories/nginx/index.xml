<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Nginx on 千兆光年&#39;s Blog</title>
        <link>http://localhost:1313/categories/nginx/</link>
        <description>Recent content in Nginx on 千兆光年&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>OyFaCC</copyright>
        <lastBuildDate>Sun, 26 Apr 2020 18:19:27 +0800</lastBuildDate><atom:link href="http://localhost:1313/categories/nginx/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Nginx 参数调优</title>
        <link>http://localhost:1313/p/nginx-%E5%8F%82%E6%95%B0%E8%B0%83%E4%BC%98/</link>
        <pubDate>Sun, 26 Apr 2020 18:19:27 +0800</pubDate>
        
        <guid>http://localhost:1313/p/nginx-%E5%8F%82%E6%95%B0%E8%B0%83%E4%BC%98/</guid>
        <description>&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;内核参数&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;值&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;/proc/sys/net/ipv4/tcp_max_syn_backlog&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2048&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;调整半连接队列的大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;/proc/sys/net/core/somaxconn&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2048&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;tcp最大连接数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;连接取决于这两个值的最小值&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;net.ipv4.ip_forward&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;打开转发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;/proc/sys/net/ipv4/tcp_tw_recycle&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;time wait快速回收，千万不要打开，1是打开，会出现connect timeout的问题 对客户端和服务器同时起作用，开启后在 3.5*RTO 内回收，负载会把 timestamp 都给清空&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;/proc/sys/net/ipv4/tcp_tw_reuse&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;复用timewaite连接，打开的意义不大，因为这个状态出现在客户端&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;nginx参数&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;值&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;worker_processes&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;工作进程数量,和cpu数量相等就行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;use epoll;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;使用epoll&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;worker_connections&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10240&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;单个工作进程允许建立的最多连接数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;server_names_hash_bucket_size&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;512&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;server name 的hash表大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;server_names_hash_max_size&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1024&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;最大的大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;underscores_in_headers&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;on&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;开启使用自定义http头部的选项，支持特定的业务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;sendfile&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;on&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;使用sendfile 好处：两个描述符之间直接传输数据，完全在内核操作，不需要先 read 再 write，没有上下文切换开销&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;tcp_nopush&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;on&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;启用了sendfile才生效，启用后数据包增加到一定大小才会发送，提升网络效率&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;tcp_nodelay&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;on&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;禁用 Nagle 算法， 加快发送数据，keepalived连接才会启用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;/&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;/&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;上面两个的参数同时开启，最终的效果是先填满包，再尽快发送。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;keepalive_timeout&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;600s&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;长链接超时时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;keepalive_requests&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;409600&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;一个长链接可以处理的客户端的请求数量最大值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;client_header_buffer_size&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;512k&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;请求头缓存大小，若请求头大，应该设置，减少内存分配的次数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;client_max_body_size&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2000M&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;请求头body的大小，默认1M。不设置上传文件会发生413&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;client_body_buffer_size&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;100M&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;body缓冲区大小，若超过写入文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;large_client_header_buffers&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4 1024k&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;当超过 上面的buffersize 使用这个，最大使用四个大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;proxy_buffer_size&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;8192k&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;代理缓存的大小，nginx-后端服务的缓存大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;proxy_buffers&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;32 8192k&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;到后端服务的缓存超过后最多可以申请多少缓存块&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;proxy_headers_hash_bucket_size&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;6400&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;代理的后端服务的hash表大小，一次分配的大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;proxy_headers_hash_max_size&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;51200&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;代理的后端服务hash表最大可以多少&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;proxy_connect_timeout   proxy_read_timeout   proxy_send_timeout&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;60&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;这三个值和后端服务同时的超时时长，设置成一样就可以&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
        </item>
        
    </channel>
</rss>
