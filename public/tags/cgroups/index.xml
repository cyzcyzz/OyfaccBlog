<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Cgroups on 千兆光年&#39;s Blog</title>
        <link>http://localhost:1313/tags/cgroups/</link>
        <description>Recent content in Cgroups on 千兆光年&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>OyFaCC</copyright>
        <lastBuildDate>Fri, 24 Jul 2020 09:55:57 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/cgroups/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Cgroups</title>
        <link>http://localhost:1313/p/cgroups/</link>
        <pubDate>Fri, 24 Jul 2020 09:55:57 +0800</pubDate>
        
        <guid>http://localhost:1313/p/cgroups/</guid>
        <description>&lt;p&gt;进程隔离后，本身会看不到其他的进程，此时会发生一个问题，独占资源，也就是说，我这个进程会把全部的资源全部跑满，其他的进程抢夺不到资源，这时候我们通常需要对隔离的进程进行一些资源的限制，这就是Linux 下的cgroups技术。&lt;/p&gt;
&lt;h3 id=&#34;简介&#34;&gt;简介
&lt;/h3&gt;&lt;p&gt;cgroups是control groups的缩写，是内核提供的可以限制和隔离进程组所使用的资源的机制。&lt;/p&gt;
&lt;p&gt;基本概念介绍&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任务，task，通常是指一个系统进程&lt;/li&gt;
&lt;li&gt;控制组，是按照一个标准划分的一组进程，资源控制都是以控制组为单位的。一个进程可以加入到一个控制组，也可以从一个进程组迁移到另一个控制组。&lt;/li&gt;
&lt;li&gt;层级，控制组可以组织成层级的形式，就像是一颗树。控制族群树上的子节点继承父节点的属性&lt;/li&gt;
&lt;li&gt;子系统，一个子系统就是一个资源控制器，如cpu，mem等，代表着一种可以限制的资源。一个子系统附加到一个层级后，表示这个层级上的控制组全部受这个子系统控制。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;原理&#34;&gt;原理
&lt;/h3&gt;&lt;p&gt;cgroups的本质是给系统进程上挂上钩子（hooks），当task运行的时候触发钩子上所附带的子系统进行检测，最终按照设置进行资源限制和优先级分配。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/proc/cgroups&lt;/code&gt;可以查看支持的子系统&lt;/p&gt;
&lt;p&gt;cgroups提供了虚拟文件系统作为用户接口，要是用系统，必须先进行挂载，默认挂载&lt;code&gt;/sys/fs/cgroups&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;规则&#34;&gt;规则
&lt;/h3&gt;&lt;p&gt;同一个层级结构可以挂载多个子系统 ，一个子系统只能附加到一个层级结构上&lt;/p&gt;
&lt;p&gt;每次系统创建新层级时，该层级内的所有任务都是默认cgroups也就是root cgroups的初始成员，根层级时系统自动创建的&lt;/p&gt;
&lt;p&gt;一个任务可以时多个控制组的成员，但是cgroups必须是不同的层级&lt;/p&gt;
&lt;p&gt;父进程clone子进程时，子进程自动属于父进程所属的控制组，可以根据需要移出&lt;/p&gt;
&lt;h3 id=&#34;命令&#34;&gt;命令
&lt;/h3&gt;&lt;h4 id=&#34;lssubsys&#34;&gt;lssubsys
&lt;/h4&gt;&lt;p&gt;查看全部子系统&lt;/p&gt;
&lt;h4 id=&#34;lscgroup&#34;&gt;lscgroup
&lt;/h4&gt;&lt;p&gt;查看全部的控制组&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
